// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package emailtemplate.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Attachment extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "EmailTemplate.Attachment";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Attachment_Email("EmailTemplate.Attachment_Email"),
		Attachment_EmailTemplate("EmailTemplate.Attachment_EmailTemplate");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Attachment(IContext context)
	{
		this(context, Core.instantiate(context, "EmailTemplate.Attachment"));
	}

	protected Attachment(IContext context, IMendixObject attachmentMendixObject)
	{
		super(context, attachmentMendixObject);
		if (!Core.isSubClassOf("EmailTemplate.Attachment", attachmentMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a EmailTemplate.Attachment");
	}

	/**
	 * @deprecated Use 'Attachment.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static emailtemplate.proxies.Attachment initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return emailtemplate.proxies.Attachment.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static emailtemplate.proxies.Attachment initialize(IContext context, IMendixObject mendixObject)
	{
		return new emailtemplate.proxies.Attachment(context, mendixObject);
	}

	public static emailtemplate.proxies.Attachment load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return emailtemplate.proxies.Attachment.initialize(context, mendixObject);
	}

	public static java.util.List<emailtemplate.proxies.Attachment> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<emailtemplate.proxies.Attachment> result = new java.util.ArrayList<emailtemplate.proxies.Attachment>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//EmailTemplate.Attachment" + xpathConstraint))
			result.add(emailtemplate.proxies.Attachment.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Attachment_Email
	 */
	public final emailtemplate.proxies.Email getAttachment_Email() throws CoreException
	{
		return getAttachment_Email(getContext());
	}

	/**
	 * @param context
	 * @return value of Attachment_Email
	 */
	public final emailtemplate.proxies.Email getAttachment_Email(IContext context) throws CoreException
	{
		emailtemplate.proxies.Email result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Attachment_Email.toString());
		if (identifier != null)
			result = emailtemplate.proxies.Email.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Attachment_Email
	 * @param attachment_email
	 */
	public final void setAttachment_Email(emailtemplate.proxies.Email attachment_email)
	{
		setAttachment_Email(getContext(), attachment_email);
	}

	/**
	 * Set value of Attachment_Email
	 * @param context
	 * @param attachment_email
	 */
	public final void setAttachment_Email(IContext context, emailtemplate.proxies.Email attachment_email)
	{
		if (attachment_email == null)
			getMendixObject().setValue(context, MemberNames.Attachment_Email.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Attachment_Email.toString(), attachment_email.getMendixObject().getId());
	}

	/**
	 * @return value of Attachment_EmailTemplate
	 */
	public final emailtemplate.proxies.EmailTemplate getAttachment_EmailTemplate() throws CoreException
	{
		return getAttachment_EmailTemplate(getContext());
	}

	/**
	 * @param context
	 * @return value of Attachment_EmailTemplate
	 */
	public final emailtemplate.proxies.EmailTemplate getAttachment_EmailTemplate(IContext context) throws CoreException
	{
		emailtemplate.proxies.EmailTemplate result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Attachment_EmailTemplate.toString());
		if (identifier != null)
			result = emailtemplate.proxies.EmailTemplate.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Attachment_EmailTemplate
	 * @param attachment_emailtemplate
	 */
	public final void setAttachment_EmailTemplate(emailtemplate.proxies.EmailTemplate attachment_emailtemplate)
	{
		setAttachment_EmailTemplate(getContext(), attachment_emailtemplate);
	}

	/**
	 * Set value of Attachment_EmailTemplate
	 * @param context
	 * @param attachment_emailtemplate
	 */
	public final void setAttachment_EmailTemplate(IContext context, emailtemplate.proxies.EmailTemplate attachment_emailtemplate)
	{
		if (attachment_emailtemplate == null)
			getMendixObject().setValue(context, MemberNames.Attachment_EmailTemplate.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Attachment_EmailTemplate.toString(), attachment_emailtemplate.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final emailtemplate.proxies.Attachment that = (emailtemplate.proxies.Attachment) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "EmailTemplate.Attachment";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}

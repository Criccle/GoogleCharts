// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package emailtemplate.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class EmailTemplate
{
	private final IMendixObject emailTemplateMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "EmailTemplate.EmailTemplate";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		TemplateName("TemplateName"),
		To("To"),
		From("From"),
		CC("CC"),
		BCC("BCC"),
		Subject("Subject"),
		HtmlBody("HtmlBody"),
		PlainBody("PlainBody"),
		CreationDate("CreationDate"),
		UseOnlyPlainText("UseOnlyPlainText"),
		EmailTemplate_MxObjectType("EmailTemplate.EmailTemplate_MxObjectType"),
		EmailTemplate_Token("EmailTemplate.EmailTemplate_Token");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public EmailTemplate(IContext context)
	{
		this(context, Core.instantiate(context, "EmailTemplate.EmailTemplate"));
	}

	protected EmailTemplate(IContext context, IMendixObject emailTemplateMendixObject)
	{
		if (emailTemplateMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("EmailTemplate.EmailTemplate", emailTemplateMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a EmailTemplate.EmailTemplate");

		this.emailTemplateMendixObject = emailTemplateMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'EmailTemplate.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static emailtemplate.proxies.EmailTemplate initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return emailtemplate.proxies.EmailTemplate.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static emailtemplate.proxies.EmailTemplate initialize(IContext context, IMendixObject mendixObject)
	{
		return new emailtemplate.proxies.EmailTemplate(context, mendixObject);
	}

	public static emailtemplate.proxies.EmailTemplate load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return emailtemplate.proxies.EmailTemplate.initialize(context, mendixObject);
	}

	public static java.util.List<emailtemplate.proxies.EmailTemplate> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<emailtemplate.proxies.EmailTemplate> result = new java.util.ArrayList<emailtemplate.proxies.EmailTemplate>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//EmailTemplate.EmailTemplate" + xpathConstraint))
			result.add(emailtemplate.proxies.EmailTemplate.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of TemplateName
	 */
	public final String getTemplateName()
	{
		return getTemplateName(getContext());
	}

	/**
	 * @param context
	 * @return value of TemplateName
	 */
	public final String getTemplateName(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.TemplateName.toString());
	}

	/**
	 * Set value of TemplateName
	 * @param templatename
	 */
	public final void setTemplateName(String templatename)
	{
		setTemplateName(getContext(), templatename);
	}

	/**
	 * Set value of TemplateName
	 * @param context
	 * @param templatename
	 */
	public final void setTemplateName(IContext context, String templatename)
	{
		getMendixObject().setValue(context, MemberNames.TemplateName.toString(), templatename);
	}

	/**
	 * @return value of To
	 */
	public final String getTo()
	{
		return getTo(getContext());
	}

	/**
	 * @param context
	 * @return value of To
	 */
	public final String getTo(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.To.toString());
	}

	/**
	 * Set value of To
	 * @param to
	 */
	public final void setTo(String to)
	{
		setTo(getContext(), to);
	}

	/**
	 * Set value of To
	 * @param context
	 * @param to
	 */
	public final void setTo(IContext context, String to)
	{
		getMendixObject().setValue(context, MemberNames.To.toString(), to);
	}

	/**
	 * @return value of From
	 */
	public final String getFrom()
	{
		return getFrom(getContext());
	}

	/**
	 * @param context
	 * @return value of From
	 */
	public final String getFrom(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.From.toString());
	}

	/**
	 * Set value of From
	 * @param from
	 */
	public final void setFrom(String from)
	{
		setFrom(getContext(), from);
	}

	/**
	 * Set value of From
	 * @param context
	 * @param from
	 */
	public final void setFrom(IContext context, String from)
	{
		getMendixObject().setValue(context, MemberNames.From.toString(), from);
	}

	/**
	 * @return value of CC
	 */
	public final String getCC()
	{
		return getCC(getContext());
	}

	/**
	 * @param context
	 * @return value of CC
	 */
	public final String getCC(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.CC.toString());
	}

	/**
	 * Set value of CC
	 * @param cc
	 */
	public final void setCC(String cc)
	{
		setCC(getContext(), cc);
	}

	/**
	 * Set value of CC
	 * @param context
	 * @param cc
	 */
	public final void setCC(IContext context, String cc)
	{
		getMendixObject().setValue(context, MemberNames.CC.toString(), cc);
	}

	/**
	 * @return value of BCC
	 */
	public final String getBCC()
	{
		return getBCC(getContext());
	}

	/**
	 * @param context
	 * @return value of BCC
	 */
	public final String getBCC(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.BCC.toString());
	}

	/**
	 * Set value of BCC
	 * @param bcc
	 */
	public final void setBCC(String bcc)
	{
		setBCC(getContext(), bcc);
	}

	/**
	 * Set value of BCC
	 * @param context
	 * @param bcc
	 */
	public final void setBCC(IContext context, String bcc)
	{
		getMendixObject().setValue(context, MemberNames.BCC.toString(), bcc);
	}

	/**
	 * @return value of Subject
	 */
	public final String getSubject()
	{
		return getSubject(getContext());
	}

	/**
	 * @param context
	 * @return value of Subject
	 */
	public final String getSubject(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Subject.toString());
	}

	/**
	 * Set value of Subject
	 * @param subject
	 */
	public final void setSubject(String subject)
	{
		setSubject(getContext(), subject);
	}

	/**
	 * Set value of Subject
	 * @param context
	 * @param subject
	 */
	public final void setSubject(IContext context, String subject)
	{
		getMendixObject().setValue(context, MemberNames.Subject.toString(), subject);
	}

	/**
	 * @return value of HtmlBody
	 */
	public final String getHtmlBody()
	{
		return getHtmlBody(getContext());
	}

	/**
	 * @param context
	 * @return value of HtmlBody
	 */
	public final String getHtmlBody(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.HtmlBody.toString());
	}

	/**
	 * Set value of HtmlBody
	 * @param htmlbody
	 */
	public final void setHtmlBody(String htmlbody)
	{
		setHtmlBody(getContext(), htmlbody);
	}

	/**
	 * Set value of HtmlBody
	 * @param context
	 * @param htmlbody
	 */
	public final void setHtmlBody(IContext context, String htmlbody)
	{
		getMendixObject().setValue(context, MemberNames.HtmlBody.toString(), htmlbody);
	}

	/**
	 * @return value of PlainBody
	 */
	public final String getPlainBody()
	{
		return getPlainBody(getContext());
	}

	/**
	 * @param context
	 * @return value of PlainBody
	 */
	public final String getPlainBody(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.PlainBody.toString());
	}

	/**
	 * Set value of PlainBody
	 * @param plainbody
	 */
	public final void setPlainBody(String plainbody)
	{
		setPlainBody(getContext(), plainbody);
	}

	/**
	 * Set value of PlainBody
	 * @param context
	 * @param plainbody
	 */
	public final void setPlainBody(IContext context, String plainbody)
	{
		getMendixObject().setValue(context, MemberNames.PlainBody.toString(), plainbody);
	}

	/**
	 * @return value of CreationDate
	 */
	public final java.util.Date getCreationDate()
	{
		return getCreationDate(getContext());
	}

	/**
	 * @param context
	 * @return value of CreationDate
	 */
	public final java.util.Date getCreationDate(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.CreationDate.toString());
	}

	/**
	 * Set value of CreationDate
	 * @param creationdate
	 */
	public final void setCreationDate(java.util.Date creationdate)
	{
		setCreationDate(getContext(), creationdate);
	}

	/**
	 * Set value of CreationDate
	 * @param context
	 * @param creationdate
	 */
	public final void setCreationDate(IContext context, java.util.Date creationdate)
	{
		getMendixObject().setValue(context, MemberNames.CreationDate.toString(), creationdate);
	}

	/**
	 * @return value of UseOnlyPlainText
	 */
	public final Boolean getUseOnlyPlainText()
	{
		return getUseOnlyPlainText(getContext());
	}

	/**
	 * @param context
	 * @return value of UseOnlyPlainText
	 */
	public final Boolean getUseOnlyPlainText(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.UseOnlyPlainText.toString());
	}

	/**
	 * Set value of UseOnlyPlainText
	 * @param useonlyplaintext
	 */
	public final void setUseOnlyPlainText(Boolean useonlyplaintext)
	{
		setUseOnlyPlainText(getContext(), useonlyplaintext);
	}

	/**
	 * Set value of UseOnlyPlainText
	 * @param context
	 * @param useonlyplaintext
	 */
	public final void setUseOnlyPlainText(IContext context, Boolean useonlyplaintext)
	{
		getMendixObject().setValue(context, MemberNames.UseOnlyPlainText.toString(), useonlyplaintext);
	}

	/**
	 * @return value of EmailTemplate_MxObjectType
	 */
	public final mxmodelreflection.proxies.MxObjectType getEmailTemplate_MxObjectType() throws CoreException
	{
		return getEmailTemplate_MxObjectType(getContext());
	}

	/**
	 * @param context
	 * @return value of EmailTemplate_MxObjectType
	 */
	public final mxmodelreflection.proxies.MxObjectType getEmailTemplate_MxObjectType(IContext context) throws CoreException
	{
		mxmodelreflection.proxies.MxObjectType result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.EmailTemplate_MxObjectType.toString());
		if (identifier != null)
			result = mxmodelreflection.proxies.MxObjectType.load(context, identifier);
		return result;
	}

	/**
	 * Set value of EmailTemplate_MxObjectType
	 * @param emailtemplate_mxobjecttype
	 */
	public final void setEmailTemplate_MxObjectType(mxmodelreflection.proxies.MxObjectType emailtemplate_mxobjecttype)
	{
		setEmailTemplate_MxObjectType(getContext(), emailtemplate_mxobjecttype);
	}

	/**
	 * Set value of EmailTemplate_MxObjectType
	 * @param context
	 * @param emailtemplate_mxobjecttype
	 */
	public final void setEmailTemplate_MxObjectType(IContext context, mxmodelreflection.proxies.MxObjectType emailtemplate_mxobjecttype)
	{
		if (emailtemplate_mxobjecttype == null)
			getMendixObject().setValue(context, MemberNames.EmailTemplate_MxObjectType.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.EmailTemplate_MxObjectType.toString(), emailtemplate_mxobjecttype.getMendixObject().getId());
	}

	/**
	 * @return value of EmailTemplate_Token
	 */
	public final java.util.List<mxmodelreflection.proxies.Token> getEmailTemplate_Token() throws CoreException
	{
		return getEmailTemplate_Token(getContext());
	}

	/**
	 * @param context
	 * @return value of EmailTemplate_Token
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<mxmodelreflection.proxies.Token> getEmailTemplate_Token(IContext context) throws CoreException
	{
		java.util.List<mxmodelreflection.proxies.Token> result = new java.util.ArrayList<mxmodelreflection.proxies.Token>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.EmailTemplate_Token.toString());
		if (valueObject == null)
			return result;
		for (IMendixObject mendixObject : Core.retrieveIdList(context, (java.util.List<IMendixIdentifier>) valueObject))
			result.add(mxmodelreflection.proxies.Token.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of EmailTemplate_Token
	 * @param emailtemplate_token
	 */
	public final void setEmailTemplate_Token(java.util.List<mxmodelreflection.proxies.Token> emailtemplate_token)
	{
		setEmailTemplate_Token(getContext(), emailtemplate_token);
	}

	/**
	 * Set value of EmailTemplate_Token
	 * @param context
	 * @param emailtemplate_token
	 */
	public final void setEmailTemplate_Token(IContext context, java.util.List<mxmodelreflection.proxies.Token> emailtemplate_token)
	{
		java.util.List<IMendixIdentifier> identifiers = new java.util.ArrayList<IMendixIdentifier>();
		for (mxmodelreflection.proxies.Token proxyObject : emailtemplate_token)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.EmailTemplate_Token.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return emailTemplateMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final emailtemplate.proxies.EmailTemplate that = (emailtemplate.proxies.EmailTemplate) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "EmailTemplate.EmailTemplate";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
